# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    locales: [ 'de', 'en' ]

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            $pdoOrDsn: '%env(DATABASE_URL)%'

    Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider:
        arguments:
            $conn: "@doctrine.dbal.default_connection"

    # Authentication
    App\Security\UserAuthenticator:
        arguments:
          $isActiveDirectoryEnabled: "%env(bool:ADAUTH_ENABLED)%"
          $logger: "@monolog.logger.auth"
          $loginRoute: 'login'
          $checkRoute: 'login_check'

    # Menu
    App\Menu\Builder:
      tags:
        - { name: knp_menu.menu_builder, method: mainMenu, alias: mainMenu }

    App\Menu\Voter:
      tags:
        - { name: knp_menu.voter }

    # Two factor
    Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\TrustedDeviceManager:
      alias: scheb_two_factor.default_trusted_device_manager

    # Firewall map
    Symfony\Bundle\SecurityBundle\Security\FirewallMap:
      alias: security.firewall.map

    # LightSAML overrides
    # Note: these services override existing services provided by LightSAML. This is necessary in order to properly
    # resolve attributes for a user.
    lightsaml.provider.name_id:
        public: true
        class: App\Saml\NameIdProvider
        autowire: true
        arguments:
            $entityDescriptorProvider: "@lightsaml.own.entity_descriptor_provider"

    lightsaml.provider.attribute_value:
        public: true
        class: App\Saml\AttributeValueProvider
        autowire: true

    LightSaml\SymfonyBridgeBundle\Bridge\Container\BuildContainer:
        alias: 'lightsaml.container.build'

    # Forgot password
    App\Security\ForgotPassword\ForgotPasswordManager:
      arguments:
        $from: "%env(MAILER_FROM)%"

    # Controllers
    App\Controller\IdpController:
        bind:
            $provider: '@lightsaml.own.entity_descriptor_provider'

    App\Controller\MetadataController:
        bind:
            $provider: '@lightsaml.own.entity_descriptor_provider'

    # Exchange API
    App\Controller\Api\IdpExchangeController:
        arguments:
            $logger: '@monolog.logger.exchange'

    SchoolIT\CommonBundle\Command\CreateCertificateCommand:
        arguments:
            $keyFile: '%idp_cert_key%'
            $certFile: '%idp_cert_file%'

    # Health Check
    App\HealthCheck\IdentityProviderCertificateCheck:
        arguments:
            $certificateFile: '%kernel.project_dir%/certs/idp.crt'

    App\HealthCheck\HealthCheckService:
        calls:
            - [ 'addCheck', [ '@App\HealthCheck\IdentityProviderCertificateCheck']]
            - [ 'addCheck', [ '@App\HealthCheck\ServiceProviderCertificateCheck']]

