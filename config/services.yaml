# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    locales: [ 'de', 'en' ]

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        public:    false
        arguments:
            - '%env(DATABASE_URL)%'

    Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider:
        public: false
        arguments: [ "@doctrine.dbal.default_connection"]

    ## PUBLIC SERVICES

    # Authentication
    App\Security\UserAuthenticator:
        autowire: true
        arguments:
          $isActiveDirectoryEnabled: "%env(bool:ADAUTH_ENABLED)%"
          $logger: "@monolog.logger.auth"

    # LightSAML
    App\Saml\ServiceProviderEntityStore:
        autowire: true
        public: true

    # Repositories
    App\Repository\ServiceAttributeRepositoryInterface:
        alias: App\Repository\ServiceAttributeRepository

    App\Repository\ServiceAttributeValueRepositoryInterface:
        alias: App\Repository\ServiceAttributeValueRepository

    # Menu
    app.menu:
      class: App\Menu\Builder
      arguments: ["@knp_menu.factory"]
      calls:
        - [ setContainer, ["@service_container" ]]
      tags:
        - { name: knp_menu.menu_builder, method: mainMenu, alias: mainMenu }

    app.menu.voter:
      class: App\Menu\Voter
      arguments:
        - "@request_stack"
      tags:
        - { name: knp_menu.voter }

    # Two factor
    Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\TrustedDeviceManager:
      alias: scheb_two_factor.default_trusted_device_manager

    # Firewall map
    Symfony\Bundle\SecurityBundle\Security\FirewallMap:
      alias: security.firewall.map


    # LightSAML overrides
    # Note: these services override existing services provided by LightSAML. This is necessary in order to properly
    # resolve attributes for a user.
    lightsaml.provider.name_id:
        public: true
        class: App\Saml\NameIdProvider
        autowire: true
        arguments:
            $entityDescriptorProvider: "@lightsaml.own.entity_descriptor_provider"

    lightsaml.provider.attribute_value:
        public: true
        class: App\Saml\AttributeValueProvider
        autowire: true

    # Forgot password
    App\Security\ForgotPassword\ForgotPasswordManager:
      arguments:
        $from: "%env(MAILER_FROM)%"

    # Doctrine Listeners
    App\EventListener\ServiceProviderListener:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    # Exchange API
    App\Controller\Api\IdpExchangeController:
        arguments:
            $logger: '@monolog.logger.exchange'