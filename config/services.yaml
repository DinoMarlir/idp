# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

parameters:
    commonmark.config:
        renderer:
            block_separator: "\n"
            inner_separator: "\n"
            soft_break: "\n"
        enable_em: true,
        enable_strong: true,
        use_asterisk: true,
        use_underscore: true,
        html_input: 'escape'
        allow_unsafe_links: false


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    _instanceof:
        App\HealthCheck\HealthCheckInterface:
            tags: [ 'app.health_check' ]

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Request,Response,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            $pdoOrDsn: '%env(DATABASE_URL)%'

    Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider:
        arguments:
            $conn: "@doctrine.dbal.default_connection"

    # Authentication
    App\Security\UserAuthenticator:
        arguments:
          $isActiveDirectoryEnabled: "%env(bool:ADAUTH_ENABLED)%"
          $logger: "@monolog.logger.auth"
          $loginRoute: 'login'
          $checkRoute: 'login_check'

    # Menu
    App\Menu\Builder:
      arguments:
          $adAuthEnabled: '%env(bool:ADAUTH_ENABLED)%'
      tags:
          - { name: knp_menu.menu_builder, method: mainMenu, alias: mainMenu }
          - { name: knp_menu.menu_builder, method: userMenu, alias: userMenu }
          - { name: knp_menu.menu_builder, method: adminMenu, alias: adminMenu }
          - { name: knp_menu.menu_builder, method: servicesMenu, alias: servicesMenu }

    SchulIT\CommonBundle\Menu\Voter:
        tags:
            - { name: knp_menu.voter }

    # Two factor
    Scheb\TwoFactorBundle\Security\TwoFactor\Trusted\TrustedDeviceManager:
      alias: scheb_two_factor.default_trusted_device_manager

    # Firewall map
    Symfony\Bundle\SecurityBundle\Security\FirewallMap:
      alias: security.firewall.map

    # LightSAML overrides
    # Note: these services override existing services provided by LightSAML. This is necessary in order to properly
    # resolve attributes for a user.
    LightSaml\Provider\NameID\NameIdProviderInterface:
        public: true
        class: App\Saml\NameIdProvider
        autowire: true
        arguments:
            $entityDescriptorProvider: "@lightsaml.own.entity_descriptor_provider"

    LightSaml\Provider\Attribute\AttributeValueProviderInterface:
        public: true
        class: App\Saml\AttributeValueProvider
        autowire: true

    LightSaml\SymfonyBridgeBundle\Bridge\Container\BuildContainer:
        alias: 'lightsaml.container.build'

    # Forgot password
    App\Security\ForgotPassword\ForgotPasswordManager:
      arguments:
        $from: "%env(MAILER_FROM)%"

    # Registration
    App\Security\Registration\RegistrationCodeManager:
        arguments:
            $from: "%env(MAILER_FROM)%"
            $domainBlocklist: "%env(REGISTRATION_DOMAIN_BLOCKLIST)%"

    # Controllers
    App\Controller\IdpController:
        bind:
            $provider: '@lightsaml.own.entity_descriptor_provider'

    App\Controller\MetadataController:
        bind:
            $provider: '@lightsaml.own.entity_descriptor_provider'

    # Exchange API
    App\Controller\Api\IdpExchangeController:
        arguments:
            $logger: '@monolog.logger.exchange'

    SchulIT\CommonBundle\Command\CreateCertificateCommand:
        arguments:
            $types:
                saml:
                    keyFile: '%idp_cert_key%'
                    certFile: '%idp_cert_file%'

    # Health Check
    App\HealthCheck\IdentityProviderCertificateCheck:
        arguments:
            $certificateFile: '%kernel.project_dir%/certs/idp.crt'

    App\HealthCheck\HealthCheckService:
        arguments:
            $checks: !tagged 'app.health_check'


    # Dark mode
    SchulIT\CommonBundle\DarkMode\DarkModeManagerInterface:
        class: App\DarkMode\DarkModeManager

    # Rest
    App\ParamConverter\JsonBodyConverter:
        arguments:
            $prefix: 'App\Request'

    # Password helper
    App\Security\PasswordStrengthHelper:
        arguments:
            $enableCompromisedCheck: '%env(bool:ENABLE_PASSWORD_COMPROMISED_CHECK)%'

    # Markdown
    League\CommonMark\EnvironmentInterface:
        class: League\CommonMark\Environment
        factory: [ 'League\CommonMark\Environment', createCommonMarkEnvironment ]

    League\CommonMark\CommonMarkConverter:
        class: League\CommonMark\CommonMarkConverter
        arguments:
            $config: "%commonmark.config%"
            $environment: "@League\\CommonMark\\EnvironmentInterface"

    Anyx\LoginGateBundle\Service\BruteForceChecker: "@anyx.login_gate.brute_force_checker"

    # COMMANDS
    SchulIT\CommonBundle\Command\SendMailsCommand:
        arguments:
            $messageLimit: '%env(int:MAILER_LIMIT)%'
        tags:
            - { name: shapecode_cron.cron_job, expression: '*\/2 * * * *' }

    App\Command\ProvisionUserCommand:
        arguments:
            $numberOfUsers: '%env(PROVISIONING_LIMIT)%'

    # FORM FLOW
    Craue\FormFlowBundle\Storage\UserSessionStorageKeyGenerator: ~

    Craue\FormFlowBundle\Storage\DoctrineStorage:
        arguments:
            $storageKeyGenerator: '@Craue\FormFlowBundle\Storage\UserSessionStorageKeyGenerator'

    Craue\FormFlowBundle\Storage\DataManager:
        arguments:
            $storage: '@Craue\FormFlowBundle\Storage\DoctrineStorage'

    craue.form.flow:
        class: '%craue.form.flow.class%'
        calls:
            - [ setDataManager, [ '@Craue\FormFlowBundle\Storage\DataManager']]
            - [ setFormFactory, [ '@form.factory']]
            - [ setRequestStack, [ '@request_stack']]
            - [ setEventDispatcher, [ '@event_dispatcher']]

    # Security
    App\Security\CronUserProvider:
        arguments:
            $username: 'cron'
            $password: '%env(CRON_PASSWORD)%'

    Symfony\Component\Security\Core\User\UserProviderInterface:
        alias: 'security.user.provider.concrete.database'

    App\Security\EmailConfirmation\ConfirmationManager:
        arguments:
            $from: "%env(MAILER_FROM)%"